/**
 * Configuration Module for Seed One
 * 
 * Centralizes application configuration with environment-specific settings.
 */

const path = require('path');
const fs = require('fs');
const { app } = require('electron');
const Store = require('electron-store');

// Determine environment
const isDev = process.argv.includes('--dev') || process.env.NODE_ENV === 'development';

// Initialize settings store
const settings = new Store({
  name: 'seed-one-settings',
  encryptionKey: 'wylloh-seed-one'
});

// Get data paths for different OS environments
const getDataPaths = () => {
  let appDataPath;
  
  if (app) {
    // In Electron context
    appDataPath = app.getPath('userData');
  } else {
    // Outside Electron context (e.g., during testing)
    const homedir = require('os').homedir();
    const platform = process.platform;
    
    if (platform === 'win32') {
      appDataPath = path.join(process.env.APPDATA || path.join(homedir, 'AppData', 'Roaming'), 'Seed-One');
    } else if (platform === 'darwin') {
      appDataPath = path.join(homedir, 'Library', 'Application Support', 'Seed-One');
    } else {
      appDataPath = path.join(homedir, '.seed-one');
    }
  }
  
  // Ensure the directory exists
  if (!fs.existsSync(appDataPath)) {
    fs.mkdirSync(appDataPath, { recursive: true });
  }
  
  return {
    appData: appDataPath,
    logs: path.join(appDataPath, 'logs'),
    cache: path.join(appDataPath, 'cache'),
    downloads: path.join(appDataPath, 'downloads')
  };
};

// Create configuration object
const config = {
  // Application info
  app: {
    name: 'Seed One',
    version: app ? app.getVersion() : '0.1.0',
    dataPath: getDataPaths()
  },
  
  // Development mode flag
  isDev,
  
  // Blockchain configuration
  blockchain: {
    rpcUrl: settings.get('blockchain.rpcUrl') || (isDev 
      ? 'https://rpc-mumbai.maticvigil.com' // Mumbai testnet for development
      : 'https://polygon-rpc.com'),         // Polygon mainnet for production
    chainId: settings.get('blockchain.chainId') || (isDev ? 80001 : 137),
    tokenContractAddress: settings.get('blockchain.tokenContract') || '0x0000000000000000000000000000000000000000', // Placeholder
    verifierContract: settings.get('blockchain.verifierContract') || '0x0000000000000000000000000000000000000000'   // Placeholder
  },
  
  // API endpoints
  api: {
    baseUrl: settings.get('api.baseUrl') || (isDev
      ? 'http://localhost:4000/api' 
      : 'https://api.wylloh.com/api'),
    timeout: settings.get('api.timeout') || 30000
  },
  
  // Storage settings
  storage: {
    ipfsGateway: settings.get('storage.ipfsGateway') || 'https://gateway.wylloh.com/ipfs',
    ipfsApiUrl: settings.get('storage.ipfsApiUrl') || 'http://localhost:5001',
    maxCacheSize: settings.get('storage.maxCacheSize') || 2 * 1024 * 1024 * 1024 // 2GB
  },
  
  // Player settings
  player: {
    defaultQuality: settings.get('player.defaultQuality') || 'auto',
    autoPlay: settings.get('player.autoPlay') !== false,
    preferredAudioLanguage: settings.get('player.audioLanguage') || 'en',
    preferredSubtitleLanguage: settings.get('player.subtitleLanguage') || 'en',
    verificationInterval: settings.get('player.verificationInterval') || 5 * 60 // 5 minutes
  },
  
  // Updates configuration
  updates: {
    checkUrl: settings.get('updates.checkUrl') || 'https://updates.wylloh.com/seed-one/latest',
    checkInterval: settings.get('updates.checkInterval') || 24, // Hours
    autoCheck: settings.get('updates.autoCheck') !== false
  },
  
  // API server configuration (for integration with Kodi)
  server: {
    port: settings.get('server.port') || 3333,
    apiKey: settings.get('server.apiKey') || 'local-seed-one-key'
  }
};

// Function to update a configuration value
const updateConfig = (key, value) => {
  // Update settings store
  settings.set(key, value);
  
  // Update in-memory config
  const keys = key.split('.');
  let current = config;
  
  for (let i = 0; i < keys.length - 1; i++) {
    if (!current[keys[i]]) {
      current[keys[i]] = {};
    }
    current = current[keys[i]];
  }
  
  current[keys[keys.length - 1]] = value;
  
  return config;
};

module.exports = {
  ...config,
  updateConfig
};